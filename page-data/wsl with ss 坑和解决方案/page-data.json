{"componentChunkName":"component---src-templates-blog-post-js","path":"/wsl with ss 坑和解决方案/","result":{"data":{"site":{"siteMetadata":{"title":"银凤梨"}},"markdownRemark":{"id":"4acb7ac2-6a07-5293-ab07-01deb598acb4","excerpt":"最近在使用 yarn 安装 node-sass cypress 时下载额外脚本有连接超时的问题, 遂翻墙 环境: 家用: win10 wsl2 ssr 端口 1080 公司: win10 wsl ssr 端口 1080 proxychains4 proxychains4 是支持 socks5 proxy…","html":"<p>最近在使用 yarn 安装 node-sass cypress 时下载额外脚本有连接超时的问题, 遂翻墙</p>\n<p>环境:</p>\n<p>家用: win10 wsl2 ssr 端口 1080</p>\n<p>公司: win10 wsl ssr 端口 1080</p>\n<h2>proxychains4</h2>\n<p>proxychains4 是支持 socks5 proxy 的联级代理, 但是只能做一层代理, 该代理为应用层级, 可规定应用走代理链. 理想很美好, 现实很残酷. 家用和公司电脑均无法通过这种方式连接网络. 无法 curl www.google.com, 无论采用 wsl2 和 wsl1. 放弃了</p>\n<p><a href=\"https://github.com/haad/proxychains\">proxychains - github</a></p>\n<h2>shadowsocksR http 代理</h2>\n<p>使用 shadowsocksR 的”允许来自局域网的连接”</p>\n<p>[<a href=\"https://moe.best/gotagota/ss-ssr-allow-lan.html\">SS/SSR] 分析&#x26;相关科普：“允许来自局域网的连接”到底怎么用</a></p>\n<p>具体原理在于, linux 在系统层级是不支持 socks5 代理的, 但是支持 http 和 https 的代理. 而在 ssr 的客户端中是有使用 http 代理来翻墙的. 例如 PAC 模式即智能代理模式就是使用 http 来代理 1080 端口的, 另外还有一个 socks5 代理同样运行在 1080 端口, 所以 ssR 其实是在同一个端口上监听了两种代理协议.</p>\n<p>所以其实只需要 wsl 的 http 代理设置到本机的 1080 端口就可以了.</p>\n<p>实战中可以使用</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">http_proxy</span><span class=\"token operator\">=</span><span class=\"token string\">\"http://127.0.0.1:1080\"</span>\n\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">https_proxy</span><span class=\"token operator\">=</span><span class=\"token string\">\"http://127.0.0.1:1080\"</span></code></pre></div>\n<p>用于设置当前终端代理. 重新带来终端后需重新设置, 这个模式只能跑 http, 对于其他需要走 socks5 的流量就差点意思了, 不过对于目前情况是够用的.</p>\n<p>也可添加脚本简化开启和关闭 proxy<a href=\"https://fe.rualc.com/note/npm-speedup.html#peng-dao-de-wen-ti\">用 Proxy 进一步提高 npm 安装速度</a></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">no_proxy</span><span class=\"token operator\">=</span>localhost,127.0.0.1,mysite.com <span class=\"token comment\"># 白名单</span>\n<span class=\"token keyword\">function</span> <span class=\"token function-name function\">proxyon</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">http_proxy</span><span class=\"token operator\">=</span><span class=\"token string\">\"http://127.0.0.1:1080\"</span> <span class=\"token comment\"># 改成你自己的地址</span>\n\n  <span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">https_proxy</span><span class=\"token operator\">=</span><span class=\"token string\">\"http://127.0.0.1:1080\"</span> <span class=\"token comment\"># 改成你自己的地址</span>\n\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"HTTP Proxy on\"</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function-name function\">proxyoff</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token builtin class-name\">unset</span> http_proxy https_proxy <span class=\"token comment\"># 取消 proxy</span>\n\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"HTTP Proxy off\"</span>\n\n<span class=\"token punctuation\">}</span>\n\nproxy <span class=\"token comment\"># 可以加入这一行实现打开终端直接开启 proxy</span></code></pre></div>\n<p>最近发现在 wsl2 下使用的常规 svelte-realword(sapper - rollup) 无法 watch /destop/<em>project</em>/src/**文件变更, 只能改回 wsl1</p>","frontmatter":{"title":"wsl with ss 坑和解决方案","date":"April 27, 2020","description":""}}},"pageContext":{"slug":"/wsl with ss 坑和解决方案/","previous":{"fields":{"slug":"/Advanced Vue Featrues - Reactivity/"},"frontmatter":{"title":"Advanced Vue Featrues - Reactivity"}},"next":{"fields":{"slug":"/关于微前端的一些思考和总结/"},"frontmatter":{"title":"关于微前端的一些思考和总结"}}}}}