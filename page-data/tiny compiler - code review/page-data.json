{"componentChunkName":"component---src-templates-blog-post-js","path":"/tiny compiler - code review/","result":{"data":{"site":{"siteMetadata":{"title":"银凤梨"}},"markdownRemark":{"id":"13da82ae-033e-5fbd-8d0c-16b44bc52b5b","excerpt":"original: the-super-tiny-compiler.js","html":"<p>original: <a href=\"https://github.com/jamiebuilds/the-super-tiny-compiler/blob/master/the-super-tiny-compiler.js\">the-super-tiny-compiler.js</a></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/* the tiny compiler */</span>\n\n<span class=\"token comment\">/**\n * 前言, 工作以来, 编译原理忘记的差不多, 其实会发现编译原理真的是一门很重要的技术\n * 不仅包含软件工程, 程序设计这些概念. 在前端有很多库其实都需要一定的编译原理的概念\n * 和应用. 例如Babel, webPack各种css, js loader, vue内置的template, uniapp, wepy,\n * taro这些小程序框架, editor的实现等等, 基本上比较大的框架和库基本都有编译原理的影子,\n * 包括我工作的小程序模板等等, 其实都有些编译原理的概念, 这里从这个tiny-compiler做个\n * 索引, 抛砖引玉, 一步步重建编译器的构造思维, 技术框架和具体实现.\n *\n */</span>\n\n<span class=\"token comment\">/**\n * tokenizer最重要的功能是take every step, 然后组成单词, 根据语义生成token,\n * 这部分的概念主要是状态机的代码编写,状态机方案有很成熟的例子,\n * 也可以通过正则来完成状态机. 我记得是由根据规则生成tokenizer的程序\n * 比较基础, 在实际应用中, 除非构建到非常低级的语言\n * 不然基本不可能到这一步, 所以tokenizer这部分,就不用怎么看.\n */</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">tokenizer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">input</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> current <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  <span class=\"token keyword\">let</span> tokens <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>current <span class=\"token operator\">&lt;</span> input<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> char <span class=\"token operator\">=</span> input<span class=\"token punctuation\">[</span>current<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>char <span class=\"token operator\">===</span> <span class=\"token string\">\"(\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      tokens<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        type<span class=\"token operator\">:</span> <span class=\"token string\">\"paren\"</span><span class=\"token punctuation\">,</span>\n        value<span class=\"token operator\">:</span> <span class=\"token string\">\"(\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      current<span class=\"token operator\">++</span>\n      <span class=\"token keyword\">continue</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>char <span class=\"token operator\">===</span> <span class=\"token string\">\")\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      tokens<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        type<span class=\"token operator\">:</span> <span class=\"token string\">\"aren\"</span><span class=\"token punctuation\">,</span>\n        value<span class=\"token operator\">:</span> <span class=\"token string\">\")\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      current<span class=\"token operator\">++</span>\n      <span class=\"token keyword\">continue</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">let</span> <span class=\"token constant\">WHITESPACE</span> <span class=\"token operator\">=</span> <span class=\"token regex\">/\\s/</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">WHITESPACE</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>char<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      current<span class=\"token operator\">++</span>\n      <span class=\"token keyword\">continue</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">let</span> <span class=\"token constant\">NUMBERS</span> <span class=\"token operator\">=</span> <span class=\"token regex\">/[0-9]/</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">NUMBERS</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>char<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\n      <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">NUMBERS</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>char<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        value <span class=\"token operator\">+=</span> char\n        char <span class=\"token operator\">=</span> input<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>current<span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span>\n      tokens<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">\"number\"</span><span class=\"token punctuation\">,</span> value <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">continue</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>char <span class=\"token operator\">==</span> <span class=\"token string\">'\"'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\n      char <span class=\"token operator\">=</span> input<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>current<span class=\"token punctuation\">]</span>\n      <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>char <span class=\"token operator\">!==</span> <span class=\"token string\">'\"'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        value <span class=\"token operator\">+=</span> char\n        char <span class=\"token operator\">=</span> input<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>current<span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span>\n      char <span class=\"token operator\">=</span> input<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>current<span class=\"token punctuation\">]</span>\n      tokens<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">\"string\"</span><span class=\"token punctuation\">,</span> value <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">continue</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">let</span> <span class=\"token constant\">LETTERS</span> <span class=\"token operator\">=</span> <span class=\"token regex\">/[a-z]/i</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">LETTERS</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>char<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\n      <span class=\"token comment\">/**\n       * 这里展现状态机一个循环结构, 实际上也需要这样来实现。\n       */</span>\n\n      <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">LETTERS</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>char<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        value <span class=\"token operator\">+=</span> char\n        char <span class=\"token operator\">=</span> input<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>current<span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span>\n      tokens<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> value <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">continue</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"invaild char\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> tokens\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">/**\n * parser是语言从具体编写的代码转换到AST的过程.\n * 例如vue的template -> virtual DOM(virtual DOM从这个结构上来说就是AST了)\n * 例如svlete compile时开启ast的结果, 其实都是AST. AST是抽象语法树的(Abstract Syntax Tree)\n * 缩写, 在编译原理中是一种中间形式的具体实现, 不过现在都是用AST了.\n */</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">parser</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">tokens</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> current <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">walk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> token <span class=\"token operator\">=</span> tokens<span class=\"token punctuation\">[</span>current<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">\"number\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      current<span class=\"token operator\">++</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        type<span class=\"token operator\">:</span> <span class=\"token string\">\"NumberLiteral\"</span><span class=\"token punctuation\">,</span>\n        value<span class=\"token operator\">:</span> token<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tokens<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">\"paren\"</span> <span class=\"token operator\">&amp;&amp;</span> tokens<span class=\"token punctuation\">.</span>value <span class=\"token operator\">==</span> <span class=\"token string\">\"(\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      token <span class=\"token operator\">=</span> tokens<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>current<span class=\"token punctuation\">]</span>\n\n      <span class=\"token keyword\">let</span> node <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        type<span class=\"token operator\">:</span> <span class=\"token string\">\"CallExpression\"</span><span class=\"token punctuation\">,</span>\n        name<span class=\"token operator\">:</span> tokens<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span>\n        params<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span>\n      token <span class=\"token operator\">=</span> tokens<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>current<span class=\"token punctuation\">]</span>\n      <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>\n        token<span class=\"token punctuation\">.</span>type <span class=\"token operator\">!==</span> <span class=\"token string\">\"paren\"</span> <span class=\"token operator\">||</span>\n        <span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">\"paren\"</span> <span class=\"token operator\">&amp;&amp;</span> token<span class=\"token punctuation\">.</span>value <span class=\"token operator\">!==</span> <span class=\"token string\">\")\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        node<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token function\">walk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        token <span class=\"token operator\">=</span> tokens<span class=\"token punctuation\">[</span>current<span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span>\n      current<span class=\"token operator\">++</span>\n      <span class=\"token keyword\">return</span> node\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeError</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">let</span> ast <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> <span class=\"token string\">\"Program\"</span><span class=\"token punctuation\">,</span>\n    body<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">/**\n   * 这个parser是递归结构, 可以看到其实tokenizer输出的tokens是一个线性序列\n   * 到了parser这一步是通过递归, 转化成树结构了, walk这个表明parser\n   * 是每次读一个token step by step进行的, 所以, 有多少个token, 就有多少个节点.\n   * 当然这依赖于具体实现. 合并多个token到一个节点, 也是可以的.\n   *\n   */</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>current <span class=\"token operator\">&lt;</span> DOMSettableTokenList<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    ast<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token function\">walk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> ast\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">/**\n * traverser应当是处理核心业务最重要的过程, 基本上核心的业务, 都是在这个遍历器上操作\n * 例如babel, svelte, loader的插件, 都有钩子去实现一些外部逻辑, 这个过程就是深度优先遍历整个语法树\n * 通过这个过程你可以改造语法树, 添加叶节点, 优化语法树等. 我个人很喜欢这个enter, exit的钩子设计\n * 可以做到编译器和比较重的一些优化, 代码检查等逻辑解耦.\n */</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">traverser</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ast<span class=\"token punctuation\">,</span> visitor</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">traverseArray</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">array<span class=\"token punctuation\">,</span> parent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    array<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">child</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">traverseNode</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">traverseNode</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node<span class=\"token punctuation\">,</span> parent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> methods <span class=\"token operator\">=</span> visitor<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>methods <span class=\"token operator\">&amp;&amp;</span> methods<span class=\"token punctuation\">.</span>enter<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      methods<span class=\"token punctuation\">.</span><span class=\"token function\">enter</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">\"Program\"</span><span class=\"token operator\">:</span>\n        <span class=\"token function\">traverseArray</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">break</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">\"CallExpression\"</span><span class=\"token operator\">:</span>\n        <span class=\"token function\">traverseArray</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">break</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">\"NumberLiteral\"</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">\"StringLiteral\"</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">break</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>methods <span class=\"token operator\">&amp;&amp;</span> methods<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      methods<span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">traverseNode</span><span class=\"token punctuation\">(</span>ast<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">/**\n * 语法树转换器, 这部分主要还是上面提到的利用遍历器对语法树进行修改的方法,\n * 这里是直接将语法树生成为目标语言的语法树既是 subject AST => target AST的实现\n */</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">transformer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ast</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> newAst <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> <span class=\"token string\">\"Program\"</span><span class=\"token punctuation\">,</span>\n    body<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n  ast<span class=\"token punctuation\">.</span>_context <span class=\"token operator\">=</span> newAst<span class=\"token punctuation\">.</span>body\n  <span class=\"token function\">traverser</span><span class=\"token punctuation\">(</span>ast<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    NumberLiteral<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">enter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node<span class=\"token punctuation\">,</span> parent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        parent<span class=\"token punctuation\">.</span>_context<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n          type<span class=\"token operator\">:</span> <span class=\"token string\">\"NumberLiteral\"</span><span class=\"token punctuation\">,</span>\n          value<span class=\"token operator\">:</span> node<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    StringLiteral<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">enter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node<span class=\"token punctuation\">,</span> parent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        parent<span class=\"token punctuation\">.</span>_context<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n          type<span class=\"token operator\">:</span> <span class=\"token string\">\"StringLiteral\"</span><span class=\"token punctuation\">,</span>\n          value<span class=\"token operator\">:</span> node<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    CallExpression<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">enter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node<span class=\"token punctuation\">,</span> parent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> expression<span class=\"token operator\">:</span> any <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n          type<span class=\"token operator\">:</span> <span class=\"token string\">\"CallExpression\"</span><span class=\"token punctuation\">,</span>\n          callee<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            type<span class=\"token operator\">:</span> <span class=\"token string\">\"Identifier\"</span><span class=\"token punctuation\">,</span>\n            name<span class=\"token operator\">:</span> node<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          arguments<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span>\n        node<span class=\"token punctuation\">.</span>context <span class=\"token operator\">=</span> expression<span class=\"token punctuation\">.</span>arguments\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">.</span>type <span class=\"token operator\">!==</span> <span class=\"token string\">\"CallExpression\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          expression <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n            type<span class=\"token operator\">:</span> <span class=\"token string\">\"ExpressionStatement\"</span><span class=\"token punctuation\">,</span>\n            expression<span class=\"token operator\">:</span> expression<span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        parent<span class=\"token punctuation\">.</span>_context<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>expression<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> newAst\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">/**\n * codegen 也没什么好说的, 主要是用AST生成目标语言的具体代码.\n */</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">codeGenerator</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"Program\"</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>codeGenerator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"ExpressionStatement\"</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">codeGenerator</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>expression<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\";\"</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"callExpression\"</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token function\">codeGenerator</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>callee<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>\n        <span class=\"token string\">\"(\"</span> <span class=\"token operator\">+</span>\n        node<span class=\"token punctuation\">.</span>arguments<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>codeGenerator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\", \"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>\n        <span class=\"token string\">\")\"</span>\n      <span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"Identifier\"</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">.</span>name\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"NumberLiteral\"</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">.</span>value\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"StringLIteral\"</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token string\">'\"'</span> <span class=\"token operator\">+</span> node<span class=\"token punctuation\">.</span>value <span class=\"token operator\">+</span> <span class=\"token string\">'\"'</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeError</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">compiler</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">input</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> tokens <span class=\"token operator\">=</span> <span class=\"token function\">tokenizer</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">let</span> ast <span class=\"token operator\">=</span> <span class=\"token function\">parser</span><span class=\"token punctuation\">(</span>tokens<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">let</span> newAst <span class=\"token operator\">=</span> <span class=\"token function\">transformer</span><span class=\"token punctuation\">(</span>ast<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">let</span> output <span class=\"token operator\">=</span> <span class=\"token function\">codeGenerator</span><span class=\"token punctuation\">(</span>newAst<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> output\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"tiny compiler - code review","date":"May 16, 2020","description":""}}},"pageContext":{"slug":"/tiny compiler - code review/","previous":{"fields":{"slug":"/react 最佳实践/"},"frontmatter":{"title":"react 最佳实践"}},"next":{"fields":{"slug":"/twilight patternMatch code review & explaination/"},"frontmatter":{"title":"twilight: patternMatch code review & explaination"}}}}}