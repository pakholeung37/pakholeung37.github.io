{"componentChunkName":"component---src-templates-blog-post-js","path":"/rust 学习笔记/","result":{"data":{"site":{"siteMetadata":{"title":"银凤梨"}},"markdownRemark":{"id":"50af6057-f746-54aa-a7d1-7966b02ee725","excerpt":"声明与可变性 在 rust 中声明和 javascript 有些类似, 基本可以总结为: 使用 let 声明变量, 使用 const 声明常量. 使用 mut…","html":"<h2>声明与可变性</h2>\n<p>在 rust 中声明和 javascript 有些类似, 基本可以总结为:</p>\n<ol>\n<li>使用 let 声明变量, 使用 const 声明常量.</li>\n<li>使用 mut 显式声明对变量可变性.</li>\n<li>变量可重复声明, 后声明的变量覆盖前声明的变量. 重复定义的变量类型可不同.</li>\n<li>常量除了具有不可变性外, 还是编译时完全确定的, 具体来说, 常量体现在内存中就是就是值固定的.</li>\n<li>mut 只定义了可变性, 但是变量的类型是不变的, 一旦推断类型就是不变的.</li>\n</ol>\n<h2>基本类型</h2>\n<p>rust 的基本类型有 4 中, 分别是整型, 浮点, 布尔和字符.</p>\n<h3>整型</h3>\n<p>整型分为有符号整型: i8, i16, i32, i64, i128, isize(取决于操作系统)</p>\n<p>无符号整型: u8, u16, u32, u64, u128, usize(取决于操作系统)</p>\n<p>如果不给定类型, 则首选推断类型为 i32</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token comment\">// 各进制写法</span>\n<span class=\"token number\">98_222</span> <span class=\"token comment\">// decimal</span>\n<span class=\"token number\">0xff</span>   <span class=\"token comment\">// hex</span>\n<span class=\"token number\">0o77</span>   <span class=\"token comment\">// octal</span>\n<span class=\"token number\">0b1111_0000</span>  <span class=\"token comment\">//binary</span>\n<span class=\"token char string\">b'A'</span>   <span class=\"token comment\">// byte 仅限u8</span></code></pre></div>\n<h3>浮点</h3>\n<p>仅有 f32, f64</p>\n<h3>布尔</h3>\n<p>仅有 bool</p>\n<h3>字符</h3>\n<p>仅有 char, 大小为 4bytes</p>\n<h2>复合类型</h2>\n<p>复合类型原生有元组和数组</p>\n<h3>元组</h3>\n<p>形如(type1, type2, type3)的类型.</p>\n<p>操作:</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token comment\">// 解构</span>\n<span class=\"token keyword\">let</span> tup<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>i32<span class=\"token punctuation\">,</span> f64<span class=\"token punctuation\">,</span> u8<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6.4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> tup<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 访问</span>\n<span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> tup<span class=\"token number\">.1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> y <span class=\"token operator\">=</span> tup<span class=\"token number\">.2</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> z <span class=\"token operator\">=</span> tup<span class=\"token number\">.3</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>数组</h3>\n<p>数组一旦声明, 长度就固定, 声明形如[type; length]</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token comment\">// 声明</span>\n<span class=\"token keyword\">let</span> a<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>i32<span class=\"token punctuation\">;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 访问</span>\n<span class=\"token keyword\">let</span> first <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> end <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 初始化</span>\n<span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>函数</h2>\n<p>在 rust 中, 一个函数的定义如下</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function\">function_name</span><span class=\"token punctuation\">(</span>param1<span class=\"token punctuation\">:</span> type1<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">...</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token punctuation\">[</span>returnType<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token punctuation\">...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>在 rust 中, 要理解返回值, 必须理解好语句和表达式, 表达式有返回值的, 而语句则没有返回值.</p>\n<p>在 rust 中, 函数的返回值, 是由最后一个表达式的值决定的. 函数的定义是语句, 不返回任何值, 但是函数的调用则是表达式, 是可以返回值的, 这一定是必须要分清楚. 在这种严格的定义下可知, rsut 的赋值语句不返回任何值, 而 rsut 的代码块则是表达式, 所以在 rust 中会出现使用代码块来返回值的情况. 而控制流(if, loop, while, for)也被定义为表达式.</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">let</span> a<span class=\"token punctuation\">:</span> u32 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 代码块的返回值为最后一个表达式的值.</span>\n<span class=\"token keyword\">let</span> a<span class=\"token punctuation\">:</span> u32 <span class=\"token operator\">=</span> <span class=\"token keyword\">if</span> a <span class=\"token operator\">==</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">{</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> a <span class=\"token operator\">==</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">{</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">loop</span> <span class=\"token punctuation\">{</span>\n    counter <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> counter <span class=\"token operator\">==</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">break</span> couter <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The result is {}\"</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>这种严格区分表达式和语句的理念可以有效理解 rust 在各种情况下的行为, 减少出错. 另语句必须使用分号作为结束.</p>\n<h2>所有权, 转移, 引用及借用</h2>\n<p>变量作用域: 当变量进入作用域时, 它是有效的, 并持续到离开作用域.</p>\n<p>所有权是指一个变量拥有改变一个分配在堆上的数据的权力, 并且每时每刻, 当且仅有一个变量拥有改变同一份数据的能力.</p>\n<p>所有权可以转移, 引用, 借用</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token comment\">// 转移, 所有权从s转移到s2上</span>\n<span class=\"token keyword\">let</span> s <span class=\"token operator\">=</span> String<span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> s2 <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 引用</span>\n<span class=\"token keyword\">let</span> s <span class=\"token operator\">=</span> String<span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> s2 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 借用, 借用是引用的一个特例, 特指将获取的引用作为函数参数</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> s <span class=\"token operator\">=</span> String<span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">change</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function\">change</span><span class=\"token punctuation\">(</span>some_string<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> String<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    some_string<span class=\"token punctuation\">.</span><span class=\"token function\">push_str</span><span class=\"token punctuation\">(</span><span class=\"token string\">\", world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>而引用又分为可变引用和不可变引用, 可变引用可以改变数据, 但是不可变不能改变数据, 用 mut 指示.</p>\n<p>在同一作用域下, 同一份数据的要么存在多个不可变引用, 要么存在单个可变引用</p>\n<p>引用必须总是有效的,</p>\n<p>这个模型旨在解决以往编程语言的几个重要问题:</p>\n<ol>\n<li>一个变量如何释放分配的内存, rust 的答案是在离开作用域后就释放.</li>\n<li>在多线程下, 如何避免数据竞争, rust 的答案是所有权机制是一个自然的读写锁模型, 可以有效避免竞争.</li>\n<li>野指针, 野引用, rust 在编译阶段就不允许引用到不存在的数据.</li>\n</ol>","frontmatter":{"title":"rust 学习笔记","date":"July 14, 2020","description":""}}},"pageContext":{"slug":"/rust 学习笔记/","previous":{"fields":{"slug":"/跨域最佳实践/"},"frontmatter":{"title":"跨域最佳实践"}},"next":{"fields":{"slug":"/常用正则表达式/"},"frontmatter":{"title":"常用正则表达式"}}}}}