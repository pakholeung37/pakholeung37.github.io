{"componentChunkName":"component---src-templates-blog-post-js","path":"/gitlab-ci quick quiz/","result":{"data":{"site":{"siteMetadata":{"title":"银凤梨"}},"markdownRemark":{"id":"6f27681a-283b-5891-8ed4-e83e0bd2f123","excerpt":"以快问快答的形式综述关于我所知道的 gitlab-ci Q: gitlab-ci 是做什么? A: gitlab-ci 是一种为自动集成/自动部署而生的工作流模式. 通过配置相应的脚本, 可以在进行相应 git 操作之后运行部署脚本. 进而形成 push…","html":"<p>以快问快答的形式综述关于我所知道的 gitlab-ci</p>\n<p><strong>Q: gitlab-ci 是做什么?</strong></p>\n<p><strong>A</strong>: gitlab-ci 是一种为自动集成/自动部署而生的工作流模式. 通过配置相应的脚本, 可以在进行相应 git 操作之后运行部署脚本. 进而形成 push -> 集成 -> 构建 -> 部署的自动化流程. 一般而言, 在 gitlab 中使用 ci 需要服务器分配一个 runner, 这个 runner 的形式可以有很多种, 并不局限于虚拟机, docker, 真实服务器等. 也不局限操作系统. 通过创建 gitlab-ci.yml 脚本, 可以操控 runner 完成这些任务.</p>\n<p><strong>Q: gitlab-ci 和 github actions 有什么异同?</strong></p>\n<p><strong>A</strong>: 在 github action 中, 所有 runner 都是以 docker 的形式出现的. 但是官方提供了大量的 image 供使用, 而 gitlab-ci 则不局限于 docker. 当然也没有初始化的必要. 除了 github actions, 其实还有很多类似 circle-ci 等优秀的集成自动化工具. 都是非常优秀的.</p>\n<p><strong>Q: 简述一下什么是 stages, jobs, pipeline.</strong></p>\n<p><strong>A</strong>: 在 runner 的概念中, 从概念的大小依次排序应当是 pipeline -> stages -> jobs. pipeline 是与每次提交相关联的一个 stages 的集合. 即是本次自动化处理任务的一个总称. 每个 pipeline 则互不影响, 可并行执行. stage 是对自动化作业流水线的每个阶段的总称, 很好理解, 每个 pipeline 都是由一个个 stages 串联而成的. 当一个 stage 成功后则会触发下一个 stage 执行, 一个 stage 失败后则会终止整个 pipeline. 值得注意的是, 在 gitlab 中, stage 是必须串行的, 不存在分支控制进入不同的 stage(其实是可以使用 when 进行简单的分支控制), 一旦定义了 stage, 则必须进入(当然你可以 skip). 而 jobs 则是每个 stage 中 runner 执行每次任务的一个基本单元. 在每个 stage 中, job 都是并行执行的, 他们之间互不影响. 所以你可以看到在理想的状态下, 每个 jobs 应该是可以分配给不同的 runner 执行, 达到并行速度最优.</p>\n<p><strong>Q: 简述一下 gitlab 的 yml 语法.</strong></p>\n<p><strong>A</strong>: 快速教程请看<a href=\"https://juejin.im/post/6844903902387650567\">GitLab CI 介绍——入门篇</a>, 详细请看<a href=\"https://docs.gitlab.com/ee/ci/yaml/README.html\">官方文档</a></p>\n<p><strong>Q: 在 yml 语法上, 有什么考究的吗?</strong></p>\n<p><strong>A</strong>: 需要注意破折号的使用, script 中使用的是字符串数组, 他的一般形式为</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">script</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> xxxxxx\n  <span class=\"token punctuation\">-</span> xxxxxx\n  <span class=\"token punctuation\">-</span> xxxxxx</code></pre></div>\n<p>而我所使用的是</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">script</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> xxxxxx\n    xxxxxx\n    xxxxxx</code></pre></div>\n<p>会被当做一条字符串.</p>\n<p><strong>Q: 相较于之前的脚本, 我做了哪些改进?</strong></p>\n<p><strong>A</strong>: 在附录 2 中有以前的 gitlabci 脚本. 对比来看</p>\n<ul>\n<li><strong>stage 运用</strong> 可以看到, 我的脚本每个 stage 更加的细化, 包含更新库代码, 安装依赖, 构建项目, 部署项目等环节. 旧脚本只有安装依赖的过程和部署</li>\n<li><strong>安装依赖的方法</strong> 在我的脚本中, 安装依赖前一个 stage 是更新库代码, 这样的做法是因为你的依赖包和版本可能会更新, 如果仅仅安装依赖, 那你新的包和版本并不能更新到仓库中. 另外, 可以看到我使用了<code class=\"language-text\">yarn --frozen-lockfile</code>这个脚本的作用是保持 yarn.lock, 这样的好处是使用 yarn 安装和检查依赖时, 会严格按照.lock 文件的版本来进行, 可以更好的控制各个依赖的版本.</li>\n<li>\n<p><strong>控制流</strong> 我的 stage 是有明确 success fail 的, 旧的脚本则总是成功.</p>\n<p>在旧的脚本中使用的是如下形式的工作流</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">- <span class=\"token function\">ssh</span> -p <span class=\"token number\">50805</span> <span class=\"token variable\">$SSH_REMOTE</span> <span class=\"token operator\">&lt;&lt;</span> EOF\n- <span class=\"token builtin class-name\">cd</span> ~/git/repo/edu/fk-education/\n- <span class=\"token function\">yarn</span> --frozen-lockfile\n- EOF</code></pre></div>\n<p>这个工作有两个问题: 1. 由于利用了 ssh, 在 ssh 代码的时候, 脚本 exit code 恒为 0, 即成功, 这样导致一个 jobs 恒为 true, 无法在脚本真正出错的时候即刻终止 pipeline 的运行. 2. 在 ssh 的脚本中间一条命令如果出现错误, 那下一条命令仍然会继续执行, 这是不能被容忍的. 为此需要使用正确的流</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">- <span class=\"token function\">ssh</span> -p <span class=\"token number\">50805</span> <span class=\"token variable\">$SSH_REMOTE</span> <span class=\"token operator\">&lt;&lt;</span> EOF\n- <span class=\"token builtin class-name\">cd</span> ~/git/repo/edu/fk-education/ <span class=\"token operator\">&amp;&amp;</span>\n<span class=\"token function\">yarn</span> --frozen-lockfile <span class=\"token operator\">||</span>\n<span class=\"token builtin class-name\">exit</span> <span class=\"token number\">1</span>\n- EOF</code></pre></div>\n<p>新修改的代码有一些不一样的区别, 1, 在命令与命令之间添加了&#x26;&#x26;逻辑, 而且, 这些命令虽然换行了, 但是没有加破折号, 意味着这些语句都是当作一条语句来执行的. 2, 在命令末尾新增了 exit code, 如果前面有命令执行失败, 则会进入||, 使 ssh 脚本非正常退出, 并且 code 为 1(正常应该为 0), 经过检验, runner 的成功和失败其实都是看最后一条命令的 exit code 的, 这样写, 则可以正确地返回正确的 stage 状态, 及时中断 stage.</p>\n</li>\n<li>\n<p><strong>如何控制分支构建流程</strong> 旧的脚本控制分支构建流程是直接写在脚本上的</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\">only<span class=\"token punctuation\">:</span>a\n<span class=\"token punctuation\">-</span> prod</code></pre></div>\n<p>我认为这是不合理的, 第一, 这种做法控制手法低效, 如果我有几个分支, 完全不一样的脚本, 或者几种 jobs 混杂在一起, 这样的脚本通常需要编写出非常多而且不合理的代码才能做到. 而我的选择是直接在每个分支中绑定一个该分支的.gitlab-ci.yml, 每个分支的 ci 流程都有自己的流程脚本. 可以比较合理地解决这个问题.</p>\n</li>\n<li>\n<p><strong>git 操作</strong> 我的代码中有绑定当前分支的分支名的变量</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\">git fetch origin $CI_COMMIT_REF_NAME <span class=\"token important\">&amp;&amp;</span>\ngit checkout $CI_COMMIT_REF_NAME <span class=\"token important\">&amp;&amp;</span>\ngit pull <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span></code></pre></div>\n<p>更加合理地获取当前 ci 构建的分支的代码.</p>\n</li>\n</ul>\n<p><strong>Q: 简述一下你在 fetch 阶段的 git 操作.</strong></p>\n<p><strong>A</strong>: 请看大屏幕</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">></span> <span class=\"token function\">git</span> fetch origin <span class=\"token variable\">$CI_COMMIT_REF_NAME</span> <span class=\"token operator\">&amp;&amp;</span>  <span class=\"token comment\"># 获取远程分支commit信息</span>\n<span class=\"token operator\">></span> <span class=\"token function\">git</span> checkout <span class=\"token variable\">$CI_COMMIT_REF_NAME</span> <span class=\"token operator\">&amp;&amp;</span>  <span class=\"token comment\"># 切换到该远程分支</span>\n<span class=\"token operator\">></span> <span class=\"token function\">git</span> pull <span class=\"token operator\">||</span> <span class=\"token comment\"># 拉取代码合并到本地</span></code></pre></div>\n<h2>附录</h2>\n<h3>附录 1 - 我的 gitlab-ci.yml</h3>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">stages</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> fetch\n  <span class=\"token punctuation\">-</span> install_deps\n  <span class=\"token punctuation\">-</span> build\n  <span class=\"token punctuation\">-</span> deploy\n\n<span class=\"token key atrule\">variables</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">SSH_REMOTE</span><span class=\"token punctuation\">:</span> faier@dev3.faidev.cc\n<span class=\"token key atrule\">fetch</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">stage</span><span class=\"token punctuation\">:</span> fetch\n  <span class=\"token key atrule\">script</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> ssh <span class=\"token punctuation\">-</span>p 50805 $SSH_REMOTE &lt;&lt; EOF\n    <span class=\"token punctuation\">-</span> cd ~/git/repo/edu/fk<span class=\"token punctuation\">-</span>education/ <span class=\"token important\">&amp;&amp;</span>\n      git fetch origin $CI_COMMIT_REF_NAME <span class=\"token important\">&amp;&amp;</span>\n      git checkout $CI_COMMIT_REF_NAME <span class=\"token important\">&amp;&amp;</span>\n      git pull <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span>\n      exit 1\n    <span class=\"token punctuation\">-</span> EOF\n<span class=\"token key atrule\">install_deps</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">stage</span><span class=\"token punctuation\">:</span> install_deps\n  <span class=\"token key atrule\">script</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> ssh <span class=\"token punctuation\">-</span>p 50805 $SSH_REMOTE &lt;&lt; EOF\n    <span class=\"token punctuation\">-</span> cd ~/git/repo/edu/fk<span class=\"token punctuation\">-</span>education/ <span class=\"token important\">&amp;&amp;</span>\n      yarn <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>frozen<span class=\"token punctuation\">-</span>lockfile <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span>\n      exit 1\n    <span class=\"token punctuation\">-</span> EOF\n<span class=\"token key atrule\">build:h5-weixin</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">stage</span><span class=\"token punctuation\">:</span> build\n  <span class=\"token key atrule\">script</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> ssh <span class=\"token punctuation\">-</span>p 50805 $SSH_REMOTE &lt;&lt; EOF\n    <span class=\"token punctuation\">-</span> cd ~/git/repo/edu/fk<span class=\"token punctuation\">-</span>education/ <span class=\"token important\">&amp;&amp;</span>\n      yarn build<span class=\"token punctuation\">:</span>h5<span class=\"token punctuation\">-</span>weixin <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>vconsole <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span>\n      exit 1\n    <span class=\"token punctuation\">-</span> EOF\n<span class=\"token key atrule\">deploy:h5-weixin</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">stage</span><span class=\"token punctuation\">:</span> deploy\n  <span class=\"token key atrule\">script</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> ssh <span class=\"token punctuation\">-</span>p 50805 $SSH_REMOTE &lt;&lt; EOF\n    <span class=\"token punctuation\">-</span> cp ~/git/repo/edu/fk<span class=\"token punctuation\">-</span>education/dist/build/h5/index.jsp.inc ~/svn/web/edu/entrance/index.jsp.inc <span class=\"token important\">&amp;&amp;</span>\n      cp <span class=\"token punctuation\">-</span>r ~/git/repo/edu/fk<span class=\"token punctuation\">-</span>education/dist/build/h5/static ~/svn/res/edu/h5/ <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span>\n      exit 1\n    <span class=\"token punctuation\">-</span> EOF</code></pre></div>\n<h3>附录 2 - gitlab 上常规的<a href=\"http://gitlab.faidev.cc/yueke/myueke-wxapp/blob/master/.gitlab-ci.yml\">gitlab-ci.yml</a></h3>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">stages</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> install_deps\n  <span class=\"token punctuation\">-</span> deploy\n\n<span class=\"token key atrule\">before_script</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> echo \"starting task\"\n\n<span class=\"token key atrule\">install_deps</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">stage</span><span class=\"token punctuation\">:</span> install_deps\n  <span class=\"token key atrule\">tags</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> jmin<span class=\"token punctuation\">-</span>tag<span class=\"token punctuation\">-</span>myueke\n  <span class=\"token key atrule\">when</span><span class=\"token punctuation\">:</span> manual\n  <span class=\"token key atrule\">only</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> prod\n  <span class=\"token key atrule\">script</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> echo 'install dep'\n    <span class=\"token punctuation\">-</span> cd D<span class=\"token punctuation\">:</span>/prod/myueke<span class=\"token punctuation\">-</span>wxapp\n    <span class=\"token punctuation\">-</span> fnpm install\n  <span class=\"token key atrule\">allow_failure</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n\n<span class=\"token key atrule\">deploy</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">stage</span><span class=\"token punctuation\">:</span> deploy\n  <span class=\"token key atrule\">tags</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> jmin<span class=\"token punctuation\">-</span>tag<span class=\"token punctuation\">-</span>myueke\n  <span class=\"token key atrule\">only</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> prod\n  <span class=\"token key atrule\">script</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> echo 'build and upload'\n    <span class=\"token punctuation\">-</span> cd D<span class=\"token punctuation\">:</span>/prod/myueke<span class=\"token punctuation\">-</span>wxapp\n    <span class=\"token punctuation\">-</span> pwd\n    <span class=\"token punctuation\">-</span> git branch\n    <span class=\"token punctuation\">-</span> git pull\n    <span class=\"token punctuation\">-</span> npm run build\n    <span class=\"token punctuation\">-</span> wxpatch build <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>no<span class=\"token punctuation\">-</span>cache\n    <span class=\"token punctuation\">-</span> npm run upload\n  <span class=\"token key atrule\">allow_failure</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></code></pre></div>","frontmatter":{"title":"gitlab-ci quick quiz","date":"December 12, 2019","description":""}}},"pageContext":{"slug":"/gitlab-ci quick quiz/","previous":{"fields":{"slug":"/hello-world/"},"frontmatter":{"title":"HelloWorld!"}},"next":{"fields":{"slug":"/git 最佳实践/"},"frontmatter":{"title":"git 最佳实践"}}}}}