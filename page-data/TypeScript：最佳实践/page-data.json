{"componentChunkName":"component---src-templates-blog-post-js","path":"/TypeScript：最佳实践/","result":{"data":{"site":{"siteMetadata":{"title":"银凤梨"}},"markdownRemark":{"id":"733e67db-8370-5ae7-9a1b-7c28809633dd","excerpt":"类型保护 typescript 中有三种正常的类型保护，包括自定义类型保护，typeof 类型保护和 instanceof 类型保护。其中 typeof 只能用于 javascript 定义的六种基础类型，而 instanceof 只能用于当类型在要检查类型的原型链中。对于其他 typescript…","html":"<h2>类型保护</h2>\n<p>typescript 中有三种正常的类型保护，包括自定义类型保护，typeof 类型保护和 instanceof 类型保护。其中 typeof 只能用于 javascript 定义的六种基础类型，而 instanceof 只能用于当类型在要检查类型的原型链中。对于其他 typescript 中其他丰富的类型，typeof 和 instanceof 都无能为力。</p>\n<h2>自定义类型保护</h2>\n<p>那么只剩下自定义保护能使用了，在官方文档中使用如下例子讲解自定义保护。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">isFish</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">pet<span class=\"token operator\">:</span> Fish <span class=\"token operator\">|</span> Bird</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> pet <span class=\"token keyword\">is</span> Fish <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>Fish<span class=\"token operator\">></span>pet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>swim <span class=\"token operator\">!==</span> <span class=\"token keyword\">undefined</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>但是有很多问题。第一，它使用了违反直觉的类型断言，因为不断言，就访问不到属性.swim。第二，如果 Fish 没有特例属性，则无法将它和其他类型区分。考虑以下例子</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Cash</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">PayPal</span> <span class=\"token punctuation\">{</span>\n  email<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">CreditCard</span> <span class=\"token punctuation\">{</span>\n  cardNumber<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  securityCode<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> PaymentMethod <span class=\"token operator\">=</span> Cash <span class=\"token operator\">|</span> PayPal <span class=\"token operator\">|</span> CreditCard\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">StringifyPaymentMethod</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">menthod<span class=\"token operator\">:</span> PaymentMethod</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>函数要在内部区分各种支付方式，然后使用不同的处理方法。</p>\n<p>在这里普通的类型保护就起不了作用了。</p>\n<p>应用字面字符串类型，则可很好解决这个问题。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Cash</span><span class=\"token punctuation\">{</span> kind<span class=\"token operator\">:</span> <span class=\"token string\">'Cash'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">PayPal</span><span class=\"token punctuation\">{</span> kind<span class=\"token operator\">:</span> <span class=\"token string\">'PayPal'</span><span class=\"token punctuation\">;</span> email<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">CreditCard</span><span class=\"token punctuation\">{</span> kind<span class=\"token operator\">:</span> <span class=\"token string\">'CreditCard'</span><span class=\"token punctuation\">;</span> cardNumber<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> securityCode<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> PaymentMethod <span class=\"token operator\">=</span> Cash <span class=\"token operator\">|</span> PayPal <span class=\"token operator\">|</span> CreditCard<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">StringifyPaymentMethod</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">menthod<span class=\"token operator\">:</span> PaymentMethod</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>mentod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'Cash'</span><span class=\"token operator\">:</span> <span class=\"token operator\">...</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'PayPal'</span><span class=\"token operator\">:</span> <span class=\"token operator\">...</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'CreditCard'</span><span class=\"token operator\">:</span> <span class=\"token operator\">...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>这里的好处有两点：一是不用再使用类型断言，二是不再依赖类型特定属性（其实说到底就是加了一个特例属性嘛）。但是即便是不使用类型断言，类型还是被保护了，在 case ‘Cash’内部，Method 则会被直接当做 Cash 类型。</p>\n<p>依靠这种自定义的类型保护，可以更好的判断包括 interface，泛型等非标准类型。</p>\n<h2>索引类型</h2>\n<p>使用索引类型，编译器就能够检查使用了动态属性名的代码</p>\n<p>考虑以下例子：</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Type</span> <span class=\"token punctuation\">{</span>\n  a<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n  b<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  c<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">prop</span><span class=\"token punctuation\">(</span>obj<span class=\"token operator\">:</span> Type<span class=\"token punctuation\">,</span> key<span class=\"token operator\">:</span> <span class=\"token string\">\"a\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"b\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>可以预料到，function prop 返回类型将是 number | string | string[]，因为你无法预料输入参数是 a，b，还是 c，因为是动态的。但编译器知道只能是这三个值，所以返回值只能是 number，string 或 string[]。</p>\n<p>但这似乎不是我们想要的，我们希望编译器在编译的时候就知道将会返回值的类型。</p>\n<p>typescript 拥有关键字 keyof，用以指代一个类型的所有 key 的值的集合。</p>\n<p>在这个例子中可以将</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">prop</span><span class=\"token punctuation\">(</span>obj<span class=\"token operator\">:</span> Type<span class=\"token punctuation\">,</span> key<span class=\"token operator\">:</span> <span class=\"token string\">\"a\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"b\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>改成</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">prop</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj<span class=\"token operator\">:</span> Type<span class=\"token punctuation\">,</span> key <span class=\"token keyword\">keyof</span> Type</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>cool, 但是状况似乎没什么变化。</p>\n<p>这里就要引入到 typescript 中的索引类型。在 typescript 中指定索引 T[K]，则会被解释成类型。例如这里</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">prop</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj<span class=\"token operator\">:</span> Type<span class=\"token punctuation\">,</span> key</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Type<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>则会被解析成 number。利用这个特性，可以解决这个问题</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Type</span> <span class=\"token punctuation\">{</span>\n  a<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n  b<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  c<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> prop<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">K</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">keyof</span> <span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>obj<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> key<span class=\"token operator\">:</span> <span class=\"token constant\">K</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>在这个例子中，返回值会被隐式解释成 T[K]，换言之，返回值直接与参数 key 和 obj 关联了，现在它可以正确指示返回值。</p>\n<p>这种模式也被广泛应用于 typescript 的一些装饰性的类型，例如考虑以下例子：</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{</span>\n  x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n  y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> ReadOnlyPoint <span class=\"token operator\">=</span> ReadOnly<span class=\"token operator\">&lt;</span>Point<span class=\"token operator\">></span>\n\n<span class=\"token comment\">// ReadOnlyPoint {</span>\n<span class=\"token comment\">//   readonly x: number;</span>\n<span class=\"token comment\">//   readonly y: number;</span>\n<span class=\"token comment\">// }</span></code></pre></div>\n<h2>ReadOnly 的定义</h2>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> ReadOnly<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">readonly</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">P</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">P</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>在这个例子中，利用了泛型 ReadOnly 装饰了接口 Point，使之变成了一个只读的类型。这种模式也同样可以应用于 nullable，optional 等装饰性的类型上</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> Nullable<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span><span class=\"token constant\">P</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">P</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> Optional<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span><span class=\"token constant\">P</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">P</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>甚至还可以形成装饰链</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> CustomPoint <span class=\"token operator\">=</span> ReadOnly<span class=\"token operator\">&lt;</span>Nullable<span class=\"token operator\">&lt;</span>Optional<span class=\"token operator\">&lt;</span>Point<span class=\"token operator\">>>></span>\n\n<span class=\"token comment\">// CustomPoint {</span>\n<span class=\"token comment\">//   readonly x?: number | null | undefined;</span>\n<span class=\"token comment\">//   readonly y?: number | null | undefined;</span>\n<span class=\"token comment\">// }</span></code></pre></div>","frontmatter":{"title":"TypeScript：最佳实践","date":"December 12, 2019","description":""}}},"pageContext":{"slug":"/TypeScript：最佳实践/","previous":{"fields":{"slug":"/git 最佳实践/"},"frontmatter":{"title":"git 最佳实践"}},"next":{"fields":{"slug":"/CRP资源整理及quick quiz/"},"frontmatter":{"title":"CRP资源整理及quick quiz"}}}}}